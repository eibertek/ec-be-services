{"version":3,"sources":["../../src/routes/apiRoutes.js"],"names":["api","dbString","connect","get","req","res","next","json","status","services","name","url","returnAllExpenses","then","data","saveExpense","err","st","error","value","expense","id","v1","_id","save","find"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIA,MAAM,sBAAV;AACA,IAAMC,WAAW,wNAAjB;AACA,mBAASC,OAAT,CAAiBD,QAAjB;;AAEAD,IAAIG,GAAJ,CAAQ,OAAR,EAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACzC,SAAOD,IAAIE,IAAJ,CAAS;AACLC,YAAO,IADF;AAELC,cAAS,CACH,EAAEC,MAAK,UAAP,EAAmBC,KAAI,eAAvB,EADG,EAEH,EAAED,MAAK,YAAP,EAAqBC,KAAI,iBAAzB,EAFG;AAFJ,GAAT,CAAP;AAQD,CATD;;AAWAX,IAAIG,GAAJ,CAAQ,eAAR,EAAyB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACjDM,sBAAoBC,IAApB,CAAyB,UAACC,IAAD,EAAQ;AAC7B,WAAOT,IAAIE,IAAJ,CAAS;AACTC,cAAO,IADE;AAETM,YAAKA;AAFI,KAAT,CAAP;AAKH,GAND;AAOD,CARD;;AAUAd,IAAIG,GAAJ,CAAQ,aAAR,EAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC7CS,gBAAcF,IAAd,CAAmB,UAACG,GAAD,EAAKC,EAAL,EAAU;AAC3B,WAAOZ,IAAIE,IAAJ,CAAS;AACZW,aAAMF,GADM;AAEZR,cAAOS;AAFK,KAAT,CAAP;AAID,GALD;AAMH,CAPD;;AASA,IAAMF,cAAc,SAAdA,WAAc,CAACL,IAAD,EAAOS,KAAP,EAAiB;AACnC,MAAIC,UAAU,4BAAkB,EAACC,IAAG,eAAKC,EAAL,EAAJ,EAAeZ,MAAKA,IAApB,EAA0BS,OAAMA,KAAhC,EAAlB,EAAyD,EAACI,KAAI,KAAL,EAAzD,CAAd;AACA,SAAOH,QAAQI,IAAR,EAAP;AACD,CAHD;AAIA,IAAMZ,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9B,SAAO,wBAAca,IAAd,CAAmB,EAAnB,EAAuB,UAACT,GAAD,EAAMF,IAAN,EAAe;AAC3C,WAAOA,IAAP;AACD,GAFM,CAAP;AAGD,CAJD;kBAKed,G","file":"apiRoutes.js","sourcesContent":["import { Router} from 'express';\nimport mongoose from 'mongoose';\nimport expensesModel from '../models/expensesModel';\nimport uuid from 'uuid';\nlet api = Router();\nconst dbString = 'mongodb://etek001:m1a9r8i4@etek01-shard-00-00-ryd3a.mongodb.net:27017,etek01-shard-00-01-ryd3a.mongodb.net:27017,etek01-shard-00-02-ryd3a.mongodb.net:27017/etek01?ssl=true&replicaSet=etek01-shard-0&authSource=admin';  \nmongoose.connect(dbString);\n\napi.get('/list', function (req, res, next) {\n  return res.json({ \n             status:'OK', \n             services:[\n                   { name:'expenses', url:'/api/expenses'},\n                   { name:'categories', url:'/api/categories'}\n                   ]\n                }\n             );\n});\n\napi.get('/test-mongodb', function (req, res, next) {\n  returnAllExpenses().then((data)=>{\n      return res.json({ \n             status:'OK', \n             data:data\n          });\n\n  });\n});\n\napi.get('/addExpense', function (req, res, next) {\n    saveExpense().then((err,st)=>{\n      return res.json({\n          error:err,\n          status:st\n      });\n    });\n});\n\nconst saveExpense = (name, value) => {\n  let expense = new expensesModel({id:uuid.v1(), name:name, value:value},{_id:false});\n  return expense.save();\n}\nconst returnAllExpenses = () => {\n  return expensesModel.find({}, (err, data) => {\n    return data;\n  });\n}\nexport default api;"]}